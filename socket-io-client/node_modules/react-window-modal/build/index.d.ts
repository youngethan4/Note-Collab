import { Component } from "react";
import { IWindowModalOptions, WindowModalBlurEvent, WindowModalUnminimizeEvent, WindowModalMinimizeEvent, WindowModalFocusEvent, WindowModalResizeEvent, WindowModalMoveEvent, WindowModalCloseEvent } from "window-modal";
export interface IWindowModalProps extends IWindowModalOptions {
    focused?: boolean;
    elementSelector?: never;
    onClose?: (event: WindowModalCloseEvent) => void;
    onMinimize?: (event: WindowModalMinimizeEvent) => void;
    onUnminimize?: (event: WindowModalUnminimizeEvent) => void;
    onFocus?: (event: WindowModalFocusEvent) => void;
    onBlur?: (event: WindowModalBlurEvent) => void;
    onResize?: (event: WindowModalResizeEvent) => void;
    onMove?: (event: WindowModalMoveEvent) => void;
}
export declare const eventHandlerToName: {
    [K in keyof IWindowModalProps]: string;
};
declare class WindowModal extends Component<IWindowModalProps> {
    private windowModal;
    private elementId;
    constructor(props: IWindowModalProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: any): void;
    render(): JSX.Element;
    _addEventListener(eventName: string, handler: (event: Event) => void): void;
    _removeEventListener(eventName: string, handler: (event: Event) => void): void;
}
export default WindowModal;
